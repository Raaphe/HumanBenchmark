/* tslint:disable */
/* eslint-disable */
/**
 * OpenApi specification - HumanBenchmark
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: raphaelpaquin19@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbstractJsonSchemaPropertyObject
 */
export interface AbstractJsonSchemaPropertyObject {
    /**
     * 
     * @type {string}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AbstractJsonSchemaPropertyObject
     */
    'readOnly'?: boolean;
}
/**
 * 
 * @export
 * @interface CollectionModelDevice
 */
export interface CollectionModelDevice {
    /**
     * 
     * @type {CollectionModelDeviceEmbedded}
     * @memberof CollectionModelDevice
     */
    '_embedded'?: CollectionModelDeviceEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelDevice
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelDeviceEmbedded
 */
export interface CollectionModelDeviceEmbedded {
    /**
     * 
     * @type {Array<DeviceResponse>}
     * @memberof CollectionModelDeviceEmbedded
     */
    'devices'?: Array<DeviceResponse>;
}
/**
 * 
 * @export
 * @interface CollectionModelObject
 */
export interface CollectionModelObject {
    /**
     * 
     * @type {CollectionModelObjectEmbedded}
     * @memberof CollectionModelObject
     */
    '_embedded'?: CollectionModelObjectEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof CollectionModelObject
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface CollectionModelObjectEmbedded
 */
export interface CollectionModelObjectEmbedded {
    /**
     * 
     * @type {Array<object>}
     * @memberof CollectionModelObjectEmbedded
     */
    'objects'?: Array<object>;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'userName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    'donePlaying'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface DeviceRequestBody
 */
export interface DeviceRequestBody {
    /**
     * 
     * @type {number}
     * @memberof DeviceRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceRequestBody
     */
    'userName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceRequestBody
     */
    'donePlaying'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceRequestBody
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface DeviceResponse
 */
export interface DeviceResponse {
    /**
     * 
     * @type {string}
     * @memberof DeviceResponse
     */
    'userName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceResponse
     */
    'donePlaying'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceResponse
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface EntityModelDevice
 */
export interface EntityModelDevice {
    /**
     * 
     * @type {string}
     * @memberof EntityModelDevice
     */
    'userName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EntityModelDevice
     */
    'donePlaying'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EntityModelDevice
     */
    'score'?: number;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelDevice
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface EntityModelGame
 */
export interface EntityModelGame {
    /**
     * 
     * @type {string}
     * @memberof EntityModelGame
     */
    'gameName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelGame
     */
    'gameDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelGame
     */
    'gameType'?: EntityModelGameGameTypeEnum;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelGame
     */
    '_links'?: { [key: string]: Link; };
}

export const EntityModelGameGameTypeEnum = {
    ChimpGame: 'CHIMP_GAME',
    VisualMemoryGame: 'VISUAL_MEMORY_GAME',
    VerbalMemoryGame: 'VERBAL_MEMORY_GAME',
    DigitMemoryGame: 'DIGIT_MEMORY_GAME'
} as const;

export type EntityModelGameGameTypeEnum = typeof EntityModelGameGameTypeEnum[keyof typeof EntityModelGameGameTypeEnum];

/**
 * 
 * @export
 * @interface EntityModelLobby
 */
export interface EntityModelLobby {
    /**
     * 
     * @type {string}
     * @memberof EntityModelLobby
     */
    'sessionCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EntityModelLobby
     */
    'gameCompleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntityModelLobby
     */
    'isStarted'?: boolean;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof EntityModelLobby
     */
    '_links'?: { [key: string]: Link; };
}
/**
 * 
 * @export
 * @interface GameRequestBody
 */
export interface GameRequestBody {
    /**
     * 
     * @type {number}
     * @memberof GameRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameRequestBody
     */
    'gameName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameRequestBody
     */
    'gameDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameRequestBody
     */
    'gameType'?: GameRequestBodyGameTypeEnum;
}

export const GameRequestBodyGameTypeEnum = {
    ChimpGame: 'CHIMP_GAME',
    VisualMemoryGame: 'VISUAL_MEMORY_GAME',
    VerbalMemoryGame: 'VERBAL_MEMORY_GAME',
    DigitMemoryGame: 'DIGIT_MEMORY_GAME'
} as const;

export type GameRequestBodyGameTypeEnum = typeof GameRequestBodyGameTypeEnum[keyof typeof GameRequestBodyGameTypeEnum];

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof Item
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    'requiredProperties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    'properties'?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    'requiredProperties'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    'definitions'?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    '$schema'?: string;
}
/**
 * 
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'href'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'hreflang'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'deprecation'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof Link
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Link
     */
    'templated'?: boolean;
}
/**
 * 
 * @export
 * @interface LobbyRequestBody
 */
export interface LobbyRequestBody {
    /**
     * 
     * @type {number}
     * @memberof LobbyRequestBody
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LobbyRequestBody
     */
    'sessionCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LobbyRequestBody
     */
    'players'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof LobbyRequestBody
     */
    'gameCompleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LobbyRequestBody
     */
    'isStarted'?: boolean;
}
/**
 * 
 * @export
 * @interface PageMetadata
 */
export interface PageMetadata {
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageMetadata
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelDevice
 */
export interface PagedModelEntityModelDevice {
    /**
     * 
     * @type {PagedModelEntityModelDeviceEmbedded}
     * @memberof PagedModelEntityModelDevice
     */
    '_embedded'?: PagedModelEntityModelDeviceEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelDevice
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelDevice
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelDeviceEmbedded
 */
export interface PagedModelEntityModelDeviceEmbedded {
    /**
     * 
     * @type {Array<EntityModelDevice>}
     * @memberof PagedModelEntityModelDeviceEmbedded
     */
    'devices'?: Array<EntityModelDevice>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelGame
 */
export interface PagedModelEntityModelGame {
    /**
     * 
     * @type {PagedModelEntityModelGameEmbedded}
     * @memberof PagedModelEntityModelGame
     */
    '_embedded'?: PagedModelEntityModelGameEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelGame
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelGame
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelGameEmbedded
 */
export interface PagedModelEntityModelGameEmbedded {
    /**
     * 
     * @type {Array<EntityModelGame>}
     * @memberof PagedModelEntityModelGameEmbedded
     */
    'games'?: Array<EntityModelGame>;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLobby
 */
export interface PagedModelEntityModelLobby {
    /**
     * 
     * @type {PagedModelEntityModelLobbyEmbedded}
     * @memberof PagedModelEntityModelLobby
     */
    '_embedded'?: PagedModelEntityModelLobbyEmbedded;
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof PagedModelEntityModelLobby
     */
    '_links'?: { [key: string]: Link; };
    /**
     * 
     * @type {PageMetadata}
     * @memberof PagedModelEntityModelLobby
     */
    'page'?: PageMetadata;
}
/**
 * 
 * @export
 * @interface PagedModelEntityModelLobbyEmbedded
 */
export interface PagedModelEntityModelLobbyEmbedded {
    /**
     * 
     * @type {Array<EntityModelLobby>}
     * @memberof PagedModelEntityModelLobbyEmbedded
     */
    'lobbies'?: Array<EntityModelLobby>;
}
/**
 * 
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     * 
     * @type {{ [key: string]: Link; }}
     * @memberof RepresentationModelObject
     */
    '_links'?: { [key: string]: Link; };
}

/**
 * DeviceControllerApi - axios parameter creator
 * @export
 */
export const DeviceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Registers a device.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('registerDevice', 'username', username)
            const localVarPath = `/v1/device/register-device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceControllerApi - functional programming interface
 * @export
 */
export const DeviceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Registers a device.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDevice(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerDevice(username, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceControllerApi.registerDevice']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DeviceControllerApi - factory interface
 * @export
 */
export const DeviceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Registers a device.
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDevice(username: string, options?: any): AxiosPromise<Device> {
            return localVarFp.registerDevice(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceControllerApi - object-oriented interface
 * @export
 * @class DeviceControllerApi
 * @extends {BaseAPI}
 */
export class DeviceControllerApi extends BaseAPI {
    /**
     * 
     * @summary Registers a device.
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public registerDevice(username: string, options?: RawAxiosRequestConfig) {
        return DeviceControllerApiFp(this.configuration).registerDevice(username, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeviceEntityControllerApi - axios parameter creator
 * @export
 */
export const DeviceEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceDeviceDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceDeviceDelete', 'id', id)
            const localVarPath = `/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-device
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceDeviceGet1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceDeviceGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceDeviceGet', 'id', id)
            const localVarPath = `/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceDevicePatch: async (id: string, deviceRequestBody: DeviceRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceDevicePatch', 'id', id)
            // verify required parameter 'deviceRequestBody' is not null or undefined
            assertParamExists('patchItemResourceDevicePatch', 'deviceRequestBody', deviceRequestBody)
            const localVarPath = `/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-device
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceDevicePost: async (deviceRequestBody: DeviceRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceDevicePost', 'deviceRequestBody', deviceRequestBody)
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceDevicePut: async (id: string, deviceRequestBody: DeviceRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceDevicePut', 'id', id)
            // verify required parameter 'deviceRequestBody' is not null or undefined
            assertParamExists('putItemResourceDevicePut', 'deviceRequestBody', deviceRequestBody)
            const localVarPath = `/devices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceEntityControllerApi - functional programming interface
 * @export
 */
export const DeviceEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceDeviceDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceDeviceDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.deleteItemResourceDeviceDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-device
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceDeviceGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceDeviceGet1(page, size, sort, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.getCollectionResourceDeviceGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceDeviceGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceDeviceGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.getItemResourceDeviceGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * patch-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceDevicePatch(id: string, deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceDevicePatch(id, deviceRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.patchItemResourceDevicePatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * create-device
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceDevicePost(deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceDevicePost(deviceRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.postCollectionResourceDevicePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceDevicePut(id: string, deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceDevicePut(id, deviceRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceEntityControllerApi.putItemResourceDevicePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DeviceEntityControllerApi - factory interface
 * @export
 */
export const DeviceEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceEntityControllerApiFp(configuration)
    return {
        /**
         * delete-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceDeviceDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemResourceDeviceDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-device
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceDeviceGet1(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<PagedModelEntityModelDevice> {
            return localVarFp.getCollectionResourceDeviceGet1(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-device
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceDeviceGet(id: string, options?: any): AxiosPromise<EntityModelDevice> {
            return localVarFp.getItemResourceDeviceGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceDevicePatch(id: string, deviceRequestBody: DeviceRequestBody, options?: any): AxiosPromise<EntityModelDevice> {
            return localVarFp.patchItemResourceDevicePatch(id, deviceRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-device
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceDevicePost(deviceRequestBody: DeviceRequestBody, options?: any): AxiosPromise<EntityModelDevice> {
            return localVarFp.postCollectionResourceDevicePost(deviceRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-device
         * @param {string} id 
         * @param {DeviceRequestBody} deviceRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceDevicePut(id: string, deviceRequestBody: DeviceRequestBody, options?: any): AxiosPromise<EntityModelDevice> {
            return localVarFp.putItemResourceDevicePut(id, deviceRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceEntityControllerApi - object-oriented interface
 * @export
 * @class DeviceEntityControllerApi
 * @extends {BaseAPI}
 */
export class DeviceEntityControllerApi extends BaseAPI {
    /**
     * delete-device
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public deleteItemResourceDeviceDelete(id: string, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).deleteItemResourceDeviceDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-device
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public getCollectionResourceDeviceGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).getCollectionResourceDeviceGet1(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-device
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public getItemResourceDeviceGet(id: string, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).getItemResourceDeviceGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-device
     * @param {string} id 
     * @param {DeviceRequestBody} deviceRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public patchItemResourceDevicePatch(id: string, deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).patchItemResourceDevicePatch(id, deviceRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-device
     * @param {DeviceRequestBody} deviceRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public postCollectionResourceDevicePost(deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).postCollectionResourceDevicePost(deviceRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-device
     * @param {string} id 
     * @param {DeviceRequestBody} deviceRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceEntityControllerApi
     */
    public putItemResourceDevicePut(id: string, deviceRequestBody: DeviceRequestBody, options?: RawAxiosRequestConfig) {
        return DeviceEntityControllerApiFp(this.configuration).putItemResourceDevicePut(id, deviceRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeviceSearchControllerApi - axios parameter creator
 * @export
 */
export const DeviceSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchDeviceGet: async (username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/search/existsByUserName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchDeviceGet1: async (username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/search/getDeviceByUserName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceSearchControllerApi - functional programming interface
 * @export
 */
export const DeviceSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchDeviceGet(username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchDeviceGet(username, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceSearchControllerApi.executeSearchDeviceGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchDeviceGet1(username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchDeviceGet1(username, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DeviceSearchControllerApi.executeSearchDeviceGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DeviceSearchControllerApi - factory interface
 * @export
 */
export const DeviceSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchDeviceGet(username?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.executeSearchDeviceGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchDeviceGet1(username?: string, options?: any): AxiosPromise<EntityModelDevice> {
            return localVarFp.executeSearchDeviceGet1(username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceSearchControllerApi - object-oriented interface
 * @export
 * @class DeviceSearchControllerApi
 * @extends {BaseAPI}
 */
export class DeviceSearchControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceSearchControllerApi
     */
    public executeSearchDeviceGet(username?: string, options?: RawAxiosRequestConfig) {
        return DeviceSearchControllerApiFp(this.configuration).executeSearchDeviceGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceSearchControllerApi
     */
    public executeSearchDeviceGet1(username?: string, options?: RawAxiosRequestConfig) {
        return DeviceSearchControllerApiFp(this.configuration).executeSearchDeviceGet1(username, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameEntityControllerApi - axios parameter creator
 * @export
 */
export const GameEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceGameDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceGameDelete', 'id', id)
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-game
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceGameGet1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceGameGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceGameGet', 'id', id)
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceGamePatch: async (id: string, gameRequestBody: GameRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceGamePatch', 'id', id)
            // verify required parameter 'gameRequestBody' is not null or undefined
            assertParamExists('patchItemResourceGamePatch', 'gameRequestBody', gameRequestBody)
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-game
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceGamePost: async (gameRequestBody: GameRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceGamePost', 'gameRequestBody', gameRequestBody)
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceGamePut: async (id: string, gameRequestBody: GameRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceGamePut', 'id', id)
            // verify required parameter 'gameRequestBody' is not null or undefined
            assertParamExists('putItemResourceGamePut', 'gameRequestBody', gameRequestBody)
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gameRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameEntityControllerApi - functional programming interface
 * @export
 */
export const GameEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceGameDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceGameDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.deleteItemResourceGameDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-game
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceGameGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceGameGet1(page, size, sort, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.getCollectionResourceGameGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceGameGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceGameGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.getItemResourceGameGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * patch-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceGamePatch(id: string, gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceGamePatch(id, gameRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.patchItemResourceGamePatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * create-game
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceGamePost(gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceGamePost(gameRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.postCollectionResourceGamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceGamePut(id: string, gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceGamePut(id, gameRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GameEntityControllerApi.putItemResourceGamePut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GameEntityControllerApi - factory interface
 * @export
 */
export const GameEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameEntityControllerApiFp(configuration)
    return {
        /**
         * delete-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceGameDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemResourceGameDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-game
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceGameGet1(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<PagedModelEntityModelGame> {
            return localVarFp.getCollectionResourceGameGet1(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceGameGet(id: string, options?: any): AxiosPromise<EntityModelGame> {
            return localVarFp.getItemResourceGameGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceGamePatch(id: string, gameRequestBody: GameRequestBody, options?: any): AxiosPromise<EntityModelGame> {
            return localVarFp.patchItemResourceGamePatch(id, gameRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-game
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceGamePost(gameRequestBody: GameRequestBody, options?: any): AxiosPromise<EntityModelGame> {
            return localVarFp.postCollectionResourceGamePost(gameRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-game
         * @param {string} id 
         * @param {GameRequestBody} gameRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceGamePut(id: string, gameRequestBody: GameRequestBody, options?: any): AxiosPromise<EntityModelGame> {
            return localVarFp.putItemResourceGamePut(id, gameRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameEntityControllerApi - object-oriented interface
 * @export
 * @class GameEntityControllerApi
 * @extends {BaseAPI}
 */
export class GameEntityControllerApi extends BaseAPI {
    /**
     * delete-game
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public deleteItemResourceGameDelete(id: string, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).deleteItemResourceGameDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-game
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public getCollectionResourceGameGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).getCollectionResourceGameGet1(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-game
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public getItemResourceGameGet(id: string, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).getItemResourceGameGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-game
     * @param {string} id 
     * @param {GameRequestBody} gameRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public patchItemResourceGamePatch(id: string, gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).patchItemResourceGamePatch(id, gameRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-game
     * @param {GameRequestBody} gameRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public postCollectionResourceGamePost(gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).postCollectionResourceGamePost(gameRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-game
     * @param {string} id 
     * @param {GameRequestBody} gameRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEntityControllerApi
     */
    public putItemResourceGamePut(id: string, gameRequestBody: GameRequestBody, options?: RawAxiosRequestConfig) {
        return GameEntityControllerApiFp(this.configuration).putItemResourceGamePut(id, gameRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LobbyControllerApi - axios parameter creator
 * @export
 */
export const LobbyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a lobby.
         * @param {string} deviceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLobby: async (deviceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceName' is not null or undefined
            assertParamExists('createLobby', 'deviceName', deviceName)
            const localVarPath = `/v1/lobby/create-lobby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceName !== undefined) {
                localVarQueryParameter['deviceName'] = deviceName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a lobby\'s players.
         * @param {string} lobbyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLobby: async (lobbyCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lobbyCode' is not null or undefined
            assertParamExists('getLobby', 'lobbyCode', lobbyCode)
            const localVarPath = `/v1/lobby/get-lobby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lobbyCode !== undefined) {
                localVarQueryParameter['lobbyCode'] = lobbyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbyControllerApi - functional programming interface
 * @export
 */
export const LobbyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a lobby.
         * @param {string} deviceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLobby(deviceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLobby(deviceName, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyControllerApi.createLobby']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Gets a lobby\'s players.
         * @param {string} lobbyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLobby(lobbyCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Device>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLobby(lobbyCode, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyControllerApi.getLobby']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LobbyControllerApi - factory interface
 * @export
 */
export const LobbyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a lobby.
         * @param {string} deviceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLobby(deviceName: string, options?: any): AxiosPromise<string> {
            return localVarFp.createLobby(deviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a lobby\'s players.
         * @param {string} lobbyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLobby(lobbyCode: string, options?: any): AxiosPromise<Array<Device>> {
            return localVarFp.getLobby(lobbyCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbyControllerApi - object-oriented interface
 * @export
 * @class LobbyControllerApi
 * @extends {BaseAPI}
 */
export class LobbyControllerApi extends BaseAPI {
    /**
     * 
     * @summary Creates a lobby.
     * @param {string} deviceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyControllerApi
     */
    public createLobby(deviceName: string, options?: RawAxiosRequestConfig) {
        return LobbyControllerApiFp(this.configuration).createLobby(deviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a lobby\'s players.
     * @param {string} lobbyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyControllerApi
     */
    public getLobby(lobbyCode: string, options?: RawAxiosRequestConfig) {
        return LobbyControllerApiFp(this.configuration).getLobby(lobbyCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LobbyEntityControllerApi - axios parameter creator
 * @export
 */
export const LobbyEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * delete-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLobbyDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteItemResourceLobbyDelete', 'id', id)
            const localVarPath = `/lobbies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lobby
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLobbyGet1: async (page?: number, size?: number, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lobbies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLobbyGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemResourceLobbyGet', 'id', id)
            const localVarPath = `/lobbies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * patch-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLobbyPatch: async (id: string, lobbyRequestBody: LobbyRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchItemResourceLobbyPatch', 'id', id)
            // verify required parameter 'lobbyRequestBody' is not null or undefined
            assertParamExists('patchItemResourceLobbyPatch', 'lobbyRequestBody', lobbyRequestBody)
            const localVarPath = `/lobbies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lobbyRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create-lobby
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLobbyPost: async (lobbyRequestBody: LobbyRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lobbyRequestBody' is not null or undefined
            assertParamExists('postCollectionResourceLobbyPost', 'lobbyRequestBody', lobbyRequestBody)
            const localVarPath = `/lobbies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lobbyRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLobbyPut: async (id: string, lobbyRequestBody: LobbyRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putItemResourceLobbyPut', 'id', id)
            // verify required parameter 'lobbyRequestBody' is not null or undefined
            assertParamExists('putItemResourceLobbyPut', 'lobbyRequestBody', lobbyRequestBody)
            const localVarPath = `/lobbies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lobbyRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbyEntityControllerApi - functional programming interface
 * @export
 */
export const LobbyEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbyEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * delete-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemResourceLobbyDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemResourceLobbyDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.deleteItemResourceLobbyDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-lobby
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionResourceLobbyGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedModelEntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionResourceLobbyGet1(page, size, sort, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.getCollectionResourceLobbyGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemResourceLobbyGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemResourceLobbyGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.getItemResourceLobbyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * patch-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchItemResourceLobbyPatch(id: string, lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchItemResourceLobbyPatch(id, lobbyRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.patchItemResourceLobbyPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * create-lobby
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCollectionResourceLobbyPost(lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCollectionResourceLobbyPost(lobbyRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.postCollectionResourceLobbyPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putItemResourceLobbyPut(id: string, lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putItemResourceLobbyPut(id, lobbyRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyEntityControllerApi.putItemResourceLobbyPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LobbyEntityControllerApi - factory interface
 * @export
 */
export const LobbyEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbyEntityControllerApiFp(configuration)
    return {
        /**
         * delete-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemResourceLobbyDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteItemResourceLobbyDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lobby
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionResourceLobbyGet1(page?: number, size?: number, sort?: Array<string>, options?: any): AxiosPromise<PagedModelEntityModelLobby> {
            return localVarFp.getCollectionResourceLobbyGet1(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get-lobby
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemResourceLobbyGet(id: string, options?: any): AxiosPromise<EntityModelLobby> {
            return localVarFp.getItemResourceLobbyGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * patch-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchItemResourceLobbyPatch(id: string, lobbyRequestBody: LobbyRequestBody, options?: any): AxiosPromise<EntityModelLobby> {
            return localVarFp.patchItemResourceLobbyPatch(id, lobbyRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * create-lobby
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCollectionResourceLobbyPost(lobbyRequestBody: LobbyRequestBody, options?: any): AxiosPromise<EntityModelLobby> {
            return localVarFp.postCollectionResourceLobbyPost(lobbyRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * update-lobby
         * @param {string} id 
         * @param {LobbyRequestBody} lobbyRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putItemResourceLobbyPut(id: string, lobbyRequestBody: LobbyRequestBody, options?: any): AxiosPromise<EntityModelLobby> {
            return localVarFp.putItemResourceLobbyPut(id, lobbyRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbyEntityControllerApi - object-oriented interface
 * @export
 * @class LobbyEntityControllerApi
 * @extends {BaseAPI}
 */
export class LobbyEntityControllerApi extends BaseAPI {
    /**
     * delete-lobby
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public deleteItemResourceLobbyDelete(id: string, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).deleteItemResourceLobbyDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lobby
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public getCollectionResourceLobbyGet1(page?: number, size?: number, sort?: Array<string>, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).getCollectionResourceLobbyGet1(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-lobby
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public getItemResourceLobbyGet(id: string, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).getItemResourceLobbyGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * patch-lobby
     * @param {string} id 
     * @param {LobbyRequestBody} lobbyRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public patchItemResourceLobbyPatch(id: string, lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).patchItemResourceLobbyPatch(id, lobbyRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create-lobby
     * @param {LobbyRequestBody} lobbyRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public postCollectionResourceLobbyPost(lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).postCollectionResourceLobbyPost(lobbyRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-lobby
     * @param {string} id 
     * @param {LobbyRequestBody} lobbyRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyEntityControllerApi
     */
    public putItemResourceLobbyPut(id: string, lobbyRequestBody: LobbyRequestBody, options?: RawAxiosRequestConfig) {
        return LobbyEntityControllerApiFp(this.configuration).putItemResourceLobbyPut(id, lobbyRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LobbyPropertyReferenceControllerApi - axios parameter creator
 * @export
 */
export const LobbyPropertyReferenceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * patch-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLobbyPatch: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLobbyPatch', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLobbyPatch', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lobbies/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLobbyPut: async (id: string, collectionModelObject: CollectionModelObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createPropertyReferenceLobbyPut', 'id', id)
            // verify required parameter 'collectionModelObject' is not null or undefined
            assertParamExists('createPropertyReferenceLobbyPut', 'collectionModelObject', collectionModelObject)
            const localVarPath = `/lobbies/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(collectionModelObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLobbyDelete: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLobbyDelete', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('deletePropertyReferenceIdLobbyDelete', 'propertyId', propertyId)
            const localVarPath = `/lobbies/{id}/players/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLobbyDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePropertyReferenceLobbyDelete', 'id', id)
            const localVarPath = `/lobbies/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLobbyGet: async (id: string, propertyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLobbyGet', 'id', id)
            // verify required parameter 'propertyId' is not null or undefined
            assertParamExists('followPropertyReferenceLobbyGet', 'propertyId', propertyId)
            const localVarPath = `/lobbies/{id}/players/{propertyId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"propertyId"}}`, encodeURIComponent(String(propertyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLobbyGet1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followPropertyReferenceLobbyGet1', 'id', id)
            const localVarPath = `/lobbies/{id}/players`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbyPropertyReferenceControllerApi - functional programming interface
 * @export
 */
export const LobbyPropertyReferenceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbyPropertyReferenceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * patch-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLobbyPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLobbyPatch(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.createPropertyReferenceLobbyPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * update-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPropertyReferenceLobbyPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPropertyReferenceLobbyPut(id, collectionModelObject, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.createPropertyReferenceLobbyPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceIdLobbyDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceIdLobbyDelete(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.deletePropertyReferenceIdLobbyDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyReferenceLobbyDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePropertyReferenceLobbyDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.deletePropertyReferenceLobbyDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLobbyGet(id: string, propertyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLobbyGet(id, propertyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.followPropertyReferenceLobbyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPropertyReferenceLobbyGet1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionModelDevice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPropertyReferenceLobbyGet1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbyPropertyReferenceControllerApi.followPropertyReferenceLobbyGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LobbyPropertyReferenceControllerApi - factory interface
 * @export
 */
export const LobbyPropertyReferenceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbyPropertyReferenceControllerApiFp(configuration)
    return {
        /**
         * patch-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLobbyPatch(id: string, collectionModelObject: CollectionModelObject, options?: any): AxiosPromise<CollectionModelDevice> {
            return localVarFp.createPropertyReferenceLobbyPatch(id, collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * update-device-by-lobby-Id
         * @param {string} id 
         * @param {CollectionModelObject} collectionModelObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPropertyReferenceLobbyPut(id: string, collectionModelObject: CollectionModelObject, options?: any): AxiosPromise<CollectionModelDevice> {
            return localVarFp.createPropertyReferenceLobbyPut(id, collectionModelObject, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceIdLobbyDelete(id: string, propertyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceIdLobbyDelete(id, propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * delete-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyReferenceLobbyDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePropertyReferenceLobbyDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {string} propertyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLobbyGet(id: string, propertyId: string, options?: any): AxiosPromise<CollectionModelDevice> {
            return localVarFp.followPropertyReferenceLobbyGet(id, propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * get-device-by-lobby-Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPropertyReferenceLobbyGet1(id: string, options?: any): AxiosPromise<CollectionModelDevice> {
            return localVarFp.followPropertyReferenceLobbyGet1(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbyPropertyReferenceControllerApi - object-oriented interface
 * @export
 * @class LobbyPropertyReferenceControllerApi
 * @extends {BaseAPI}
 */
export class LobbyPropertyReferenceControllerApi extends BaseAPI {
    /**
     * patch-device-by-lobby-Id
     * @param {string} id 
     * @param {CollectionModelObject} collectionModelObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public createPropertyReferenceLobbyPatch(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLobbyPatch(id, collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update-device-by-lobby-Id
     * @param {string} id 
     * @param {CollectionModelObject} collectionModelObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public createPropertyReferenceLobbyPut(id: string, collectionModelObject: CollectionModelObject, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).createPropertyReferenceLobbyPut(id, collectionModelObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-device-by-lobby-Id
     * @param {string} id 
     * @param {string} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public deletePropertyReferenceIdLobbyDelete(id: string, propertyId: string, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceIdLobbyDelete(id, propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete-device-by-lobby-Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public deletePropertyReferenceLobbyDelete(id: string, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).deletePropertyReferenceLobbyDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-device-by-lobby-Id
     * @param {string} id 
     * @param {string} propertyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public followPropertyReferenceLobbyGet(id: string, propertyId: string, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLobbyGet(id, propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get-device-by-lobby-Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyPropertyReferenceControllerApi
     */
    public followPropertyReferenceLobbyGet1(id: string, options?: RawAxiosRequestConfig) {
        return LobbyPropertyReferenceControllerApiFp(this.configuration).followPropertyReferenceLobbyGet1(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LobbySearchControllerApi - axios parameter creator
 * @export
 */
export const LobbySearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLobbyGet: async (sessionCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lobbies/search/existsBySessionCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionCode !== undefined) {
                localVarQueryParameter['sessionCode'] = sessionCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLobbyGet1: async (sessionCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lobbies/search/getSessionBySessionCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionCode !== undefined) {
                localVarQueryParameter['sessionCode'] = sessionCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LobbySearchControllerApi - functional programming interface
 * @export
 */
export const LobbySearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LobbySearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchLobbyGet(sessionCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchLobbyGet(sessionCode, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbySearchControllerApi.executeSearchLobbyGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSearchLobbyGet1(sessionCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityModelLobby>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSearchLobbyGet1(sessionCode, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LobbySearchControllerApi.executeSearchLobbyGet1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LobbySearchControllerApi - factory interface
 * @export
 */
export const LobbySearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LobbySearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLobbyGet(sessionCode?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.executeSearchLobbyGet(sessionCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sessionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSearchLobbyGet1(sessionCode?: string, options?: any): AxiosPromise<EntityModelLobby> {
            return localVarFp.executeSearchLobbyGet1(sessionCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LobbySearchControllerApi - object-oriented interface
 * @export
 * @class LobbySearchControllerApi
 * @extends {BaseAPI}
 */
export class LobbySearchControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} [sessionCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbySearchControllerApi
     */
    public executeSearchLobbyGet(sessionCode?: string, options?: RawAxiosRequestConfig) {
        return LobbySearchControllerApiFp(this.configuration).executeSearchLobbyGet(sessionCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sessionCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbySearchControllerApi
     */
    public executeSearchLobbyGet1(sessionCode?: string, options?: RawAxiosRequestConfig) {
        return LobbySearchControllerApiFp(this.configuration).executeSearchLobbyGet1(sessionCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor112: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor113: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile/lobbies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor111(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor111(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.descriptor111']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor112(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor112(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.descriptor112']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptor113(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptor113(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.descriptor113']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFormsOfMetadata1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFormsOfMetadata1(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfileControllerApi.listAllFormsOfMetadata1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor111(options?: any): AxiosPromise<string> {
            return localVarFp.descriptor111(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor112(options?: any): AxiosPromise<string> {
            return localVarFp.descriptor112(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptor113(options?: any): AxiosPromise<string> {
            return localVarFp.descriptor113(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFormsOfMetadata1(options?: any): AxiosPromise<RepresentationModelObject> {
            return localVarFp.listAllFormsOfMetadata1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor111(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor111(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor112(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor112(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public descriptor113(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).descriptor113(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public listAllFormsOfMetadata1(options?: RawAxiosRequestConfig) {
        return ProfileControllerApiFp(this.configuration).listAllFormsOfMetadata1(options).then((request) => request(this.axios, this.basePath));
    }
}



